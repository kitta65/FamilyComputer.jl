function concat(hi::UInt8, lo::UInt8)::UInt16
    (UInt16(hi) << 8) + lo
end

# `..` is used as concatination operator also in lua
function ..(hi::UInt8, lo::UInt8)::UInt16
    concat(hi, lo)
end


function plot(pixels::Array{UInt8})
    if SDL_Init(SDL_INIT_VIDEO | SDL_INIT_EVENTS) < 0
        throw("cannot initialize sdl")
    end

    window = SDL_CreateWindow(
        "FamilyComputer.jl", # window name

        # window position
        SDL_WINDOWPOS_CENTERED,
        SDL_WINDOWPOS_CENTERED,
        256 * 2, # width
        240 * 2, # height
        SDL_WINDOW_SHOWN,
    )
    renderer = SDL_CreateRenderer(
        window,
        -1, # 1st driver supporting the requested flags
        SDL_RENDERER_ACCELERATED | SDL_RENDERER_PRESENTVSYNC,
    )
    texture = SDL_CreateTexture(
        renderer,
        SDL_PIXELFORMAT_RGB24,
        SDL_TEXTUREACCESS_STATIC,
        256,
        240,
    )
    SDL_UpdateTexture(
        texture,
        C_NULL, # entire texture
        pixels, # rand(UInt8, 256 * 3 * 240),
        256 * 3, # the number of bytes of a row
    )
    SDL_RenderClear(renderer)
    SDL_RenderCopy(
        renderer,
        texture,
        C_NULL, # entire
        C_NULL, # entire
    )
    SDL_RenderPresent(renderer)
    SDL_Delay(1000 * 5)

    SDL_DestroyTexture(texture)
    SDL_DestroyRenderer(renderer)
    SDL_DestroyWindow(window)
    SDL_Quit()
end

struct RGB
    red::UInt8
    green::UInt8
    blue::UInt8
end

# http://www.romdetectives.com/Wiki/index.php?title=NES_Palette
const palette::Array{RGB} = [
    RGB(0x7C, 0x7C, 0x7C),
    RGB(0x00, 0x00, 0xFC),
    RGB(0x00, 0x00, 0xBC),
    RGB(0x44, 0x28, 0xBC),
    RGB(0x94, 0x00, 0x84),
    RGB(0xA8, 0x00, 0x20),
    RGB(0xA8, 0x10, 0x00),
    RGB(0x88, 0x14, 0x00),
    RGB(0x50, 0x30, 0x00),
    RGB(0x00, 0x78, 0x00),
    RGB(0x00, 0x68, 0x00),
    RGB(0x00, 0x58, 0x00),
    RGB(0x00, 0x40, 0x58),
    RGB(0x00, 0x00, 0x00),
    RGB(0x00, 0x00, 0x00),
    RGB(0x00, 0x00, 0x00),
    RGB(0xBC, 0xBC, 0xBC),
    RGB(0x00, 0x78, 0xF8),
    RGB(0x00, 0x58, 0xF8),
    RGB(0x68, 0x44, 0xFC),
    RGB(0xD8, 0x00, 0xCC),
    RGB(0xE4, 0x00, 0x58),
    RGB(0xF8, 0x38, 0x00),
    RGB(0xE4, 0x5C, 0x10),
    RGB(0xAC, 0x7C, 0x00),
    RGB(0x00, 0xB8, 0x00),
    RGB(0x00, 0xA8, 0x00),
    RGB(0x00, 0xA8, 0x44),
    RGB(0x00, 0x88, 0x88),
    RGB(0x00, 0x00, 0x00),
    RGB(0x00, 0x00, 0x00),
    RGB(0x00, 0x00, 0x00),
    RGB(0xF8, 0xF8, 0xF8),
    RGB(0x3C, 0xBC, 0xFC),
    RGB(0x68, 0x88, 0xFC),
    RGB(0x98, 0x78, 0xF8),
    RGB(0xF8, 0x78, 0xF8),
    RGB(0xF8, 0x58, 0x98),
    RGB(0xF8, 0x78, 0x58),
    RGB(0xFC, 0xA0, 0x44),
    RGB(0xF8, 0xB8, 0x00),
    RGB(0xB8, 0xF8, 0x18),
    RGB(0x58, 0xD8, 0x54),
    RGB(0x58, 0xF8, 0x98),
    RGB(0x00, 0xE8, 0xD8),
    RGB(0x78, 0x78, 0x78),
    RGB(0x00, 0x00, 0x00),
    RGB(0x00, 0x00, 0x00),
    RGB(0xFC, 0xFC, 0xFC),
    RGB(0xA4, 0xE4, 0xFC),
    RGB(0xB8, 0xB8, 0xF8),
    RGB(0xD8, 0xB8, 0xF8),
    RGB(0xF8, 0xB8, 0xF8),
    RGB(0xF8, 0xA4, 0xC0),
    RGB(0xF0, 0xD0, 0xB0),
    RGB(0xFC, 0xE0, 0xA8),
    RGB(0xF8, 0xD8, 0x78),
    RGB(0xD8, 0xF8, 0x78),
    RGB(0xB8, 0xF8, 0xB8),
    RGB(0xB8, 0xF8, 0xD8),
    RGB(0x00, 0xFC, 0xFC),
    RGB(0xF8, 0xD8, 0xF8),
    RGB(0x00, 0x00, 0x00),
    RGB(0x00, 0x00, 0x00),
]
